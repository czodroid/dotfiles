#! /usr/bin/env perl
#
# Filename: czolsb
# Author: Olivier Sirol <czo@free.fr>
# License: GPL-2.0 (http://www.gnu.org/copyleft)
# File Created: 22 April 2009
# Last Modified: Sunday 25 August 2024, 01:53
# $Id: czolsb,v 1.73 2024/08/24 23:53:21 czo Exp $
# Edit Time: 60:19:27
# Description:
#
#   This script displays the hostname, distribution version,
#   machine hardware name, kernel version, number of processors
#   and their make/model, memory, swap space and a version with
#   the latest update, which can be placed in the /etc/motd file
#
#   I wrote `czolsb' for Linux when I had to give ESA the well
#   defined version 'centos_6.5-x86_64-czo_servup-20140410'
#
#   Now it works for Linux, Android, FreeBSD, OpenBSD, NetBSD,
#   macOS, Windows (Cygwin/Mingw)
#
#   It will give you the update date if you enter the date in
#   each update as follows:
#    echo $(date +%Y-%m-%d) > /etc/lsb-czo-updatedate
#
#   On Linux copy this script to /etc and make a cron
#   /etc/cron.d/czo-motd-czolsb:
#    @reboot      root   /etc/czolsb > /etc/motd 2> /dev/null
#
# Copyright: (C) 2009-2024 Olivier Sirol <czo@free.fr>

# use strict;
use warnings;

$release_file        = '/etc/os-release';
$debian_version_file = '/etc/debian_version';
$lsb_czo_file        = '/etc/lsb-czo-updatedate';

$ENV{LC_ALL} = "C";
$ENV{PATH}   = "$ENV{PATH}:/sbin";
$debug       = 0;

##=======================================================
## print debug

sub printd {
    warn(@_) if $debug;
}

sub printv {
    while ( $s = shift ) {
        if ($debug) { warn( $s . ": '" . $$s . "'\n" ); }
    }
}

##=======================================================
## get the first line of a shell command

sub qxc {
    my $s;
    ($s) = qx(@_);
    chomp($s);
    return $s;
}

##=======================================================
## kilo

sub kilo {
    ($SizeInByte) = @_;

    $SizeInKilo = sprintf( "%.0f", $SizeInByte / 1024.0 );
    $SizeInMeg  = sprintf( "%.0f", $SizeInByte / 1024.0 / 1024 );
    $SizeInGig  = sprintf( "%.1f", $SizeInByte / 1024.0 / 1024 / 1024 );
    $SizeInTB   = sprintf( "%.1f", $SizeInByte / 1024.0 / 1024 / 1024 / 1024 );

    if ( $SizeInKilo < 1000 ) {
        $kilo = $SizeInKilo . "KB";
    } else {
        if ( $SizeInMeg < 1000 ) {
            $kilo = $SizeInMeg . "MB";
        } else {
            if ( $SizeInGig < 1000 ) {
                $kilo = $SizeInGig . "GB";
            } else {
                $kilo = $SizeInTB . "TB";
            }
        }
    }
    return $kilo;
}

##=======================================================
## main

$HOSTNAME = $ENV{HOSTNAME};
if ( !defined($HOSTNAME) ) {
    $HOSTNAME = qxc('hostname 2>/dev/null');
}
if ( !defined($HOSTNAME) ) {
    $HOSTNAME = qxc('uname -n 2>/dev/null');
}
$HOSTNAME =~ s/\..*//;

$CCNAME = qxc('uname -m');
$CKNAME = qxc('uname -r');
$OSN    = qxc('uname');

##printv(qw(CCNAME CKNAME OSN));

# Linux | Android | Cygwin
if ( $OSN =~ /^Linux|^Android|^Cygwin|^Mingw/i ) {
    $OSNAME = qxc('uname -o');
    if ( $OSN =~ /^Linux/ ) {
        if ( system('lsb_release >/dev/null 2>&1') != 0 ) {
            if ( -r $release_file ) {
                printd "-> reading $release_file\n";
                if ( open( FILE, "<$release_file" ) ) {
                    while (<FILE>) {
                        chomp $_;
                        if ( $_ =~ m/["]?([^="]+)["]?=["]?([^"]+)["]?/ ) {
                            ##printd "'$1':        '$2'\n";
                            ${$1} = $2;
                        }
                    }
                    close FILE;
                }
            } else {
                printd "-> nothing found\n";
                $PRETTY_NAME = "Linux";
                $ID          = "n/a";
                $VERSION_ID  = "n/a";
            }
        } else {
            printd "-> found lsb_release\n";
            $PRETTY_NAME = qxc('lsb_release -sd');
            $ID          = qxc('lsb_release -si');
            $VERSION_ID  = qxc('lsb_release -sr');
        }

        if ( $ID =~ /debian/i || $ID =~ /raspbian/i ) {
            if ( $VERSION_ID >= 10 ) {
                printd "-> debian >= 10: no more dot release, but keeping it\n";
                if ( -r $debian_version_file ) {
                    if ( open( FILE, "<$debian_version_file" ) ) {
                        ($vid) = <FILE>;
                        chomp $vid;
                        $PRETTY_NAME =~ s/$VERSION_ID/$vid/;
                        $VERSION_ID = $vid;
                        close FILE;
                    }
                }
            }
        }
    } else {
        $ID          = "Windows";
        $OSN         = lc($OSN);
        $PRETTY_NAME = "$ID ($OSN)";
        $VERSION_ID  = $OSN;
        $VERSION_ID =~ s/^[^-]*-//;
        $VERSION_ID =~ s/-/_/g;
    }

    foreach (qx(lscpu 2>/dev/null)) {
        chomp;
        if (/^CPU\(s\):\s+(.*)/m)      { $CNBCORE    = $1; }
        if (/^\s*Model name:\s+(.*)/m) { $CCOREMODEL = $1; }
    }

    if ( !defined($CCOREMODEL) ) {
        ## CPU
        $CNBCORE = 0;
        if ( open( FILE, "</proc/cpuinfo" ) ) {
            while (<FILE>) {
                chomp $_;
                if ( $_ =~ /^((model name)|(cpu model))[\t ]*: (.*)/ ) {
                    $CNBCORE += 1;
                    $CCOREMODEL = $4;
                    $CCOREMODEL =~ s/  */ /g;
                    printv(qw(CCOREMODEL CNBCORE));
                }
            }
            close FILE;
        }

        if ( $CNBCORE == 0 ) {
            if ( open( FILE, "</proc/cpuinfo" ) ) {
                while (<FILE>) {
                    chomp $_;
                    if ( $_ =~ /^Processor[\t ]*: (.*)/ ) {
                        $CNBCORE += 1;
                        $CCOREMODEL = $1;
                        $CCOREMODEL =~ s/  */ /g;
                        printv(qw(CCOREMODEL CNBCORE));
                    }
                }
                close FILE;
            }
        }
    }

    if ( !defined($CCOREMODEL) ) {
        $CNBCORE    = '???';
        $CCOREMODEL = '???';
    }

    ## Memory
    if ( open( FILE, "</proc/meminfo" ) ) {
        while (<FILE>) {
            chomp $_;
            if ( $_ =~ /^MemTotal:\s*(.*) kB/ ) {
                $CMEM = $1;
                printv(qw(CMEM));
                ## in KB
                ## $CMEM = sprintf( "%.1fGB RAM", $CMEM / 1024 / 1024 );
                $CMEM = kilo( $CMEM * 1024 ) . ' RAM';
            }
            if ( $_ =~ /^SwapTotal:\s*(.*) kB/ ) {
                $CSWAP = $1;
                printv(qw(CSWAP));
                if ( $CSWAP eq 0 ) {
                    $CSWAP = "no swap";
                } else {
                    ## in KB
                    ## $CSWAP = sprintf( "%.1fGB SWAP", $CSWAP / 1024 / 1024 );
                    $CSWAP = kilo( $CSWAP * 1024 ) . ' SWAP';
                }
            }
        }
        close FILE;
    }

    if ( $OSNAME =~ /Android/i ) {
        $ID          = $OSNAME;
        $VERSION_ID  = qxc('getprop ro.build.version.release');
        $PRETTY_NAME = "Linux ($ID $VERSION_ID)";
        ## 5.10.101-android12-9-00017-ge660be55c683-ab9041535
        ##$CKNAME=~ s/-.*$//;
    }

    $CRELEASE = $PRETTY_NAME;
    $CRELEASE =~ s/  */ /g;
    $CRELEASE =~ s/"//g;

}

# FreeBSD | OpenBSD | NetBSD | Darwin
elsif ( $OSN =~ /^FreeBSD|^OpenBSD|^NetBSD|^Darwin/ ) {

    $ID         = $OSN;
    $VERSION_ID = $CKNAME;
    $VERSION_ID =~ s/-.*//g;
    $CRELEASE = "$ID $VERSION_ID";
    $CNBCORE  = qxc('sysctl -n hw.ncpu');

    # FreeBSD | OpenBSD
    if ( $OSN =~ /^FreeBSD|^OpenBSD/ ) {
        $CCOREMODEL = qxc('sysctl -n hw.model');
    }

    # NetBSD
    if ( $OSN =~ /^NetBSD/ ) {
        $CCOREMODEL = qxc('sysctl -n machdep.cpu_brand');
    }

    ## Memory
    if ( $OSN =~ /^FreeBSD|^OpenBSD|^NetBSD/ ) {
        $CMEM = qxc('sysctl -n hw.physmem');
        printv(qw(CMEM));
        ## in B
        ## $CMEM = sprintf( "%.1fGB RAM", $CMEM / 1024 / 1024 / 1024 );
        $CMEM = kilo($CMEM) . ' RAM';

        ($CSWAP) = ( qx'swapctl -sk' =~ /^total:\s*([^\s]*) .*/i );
        printv(qw(CSWAP));
        if ( $CSWAP eq 0 ) {
            $CSWAP = "no swap";
        } else {
            ## in KB
            ## $CSWAP = sprintf( "%.1fGB SWAP", $CSWAP / 1024 / 1024 );
            $CSWAP = kilo( $CSWAP * 1024 ) . ' SWAP';
        }
    }

    if ( $OSN =~ /^Darwin/ ) {
        $ID         = 'macOS';
        $VERSION_ID = qxc('sysctl -n kern.osproductversion');
        $CRELEASE   = "$ID $VERSION_ID";
        $CCOREMODEL = qxc('sysctl -n machdep.cpu.brand_string');

        ## Memory
        $CMEM = qxc('sysctl -n hw.memsize');
        printv(qw(CMEM));
        ## in B
        ## $CMEM = sprintf( "%.1fGB RAM", $CMEM / 1024 / 1024 / 1024 );
        $CMEM = kilo($CMEM) . ' RAM';

        ($CSWAP) = ( qx'sysctl -n vm.swapusage' =~ /^total = ([^M]*)M .*/ );
        printv(qw(CSWAP));
        if ( $CSWAP =~ '0.00' ) {
            $CSWAP = "no swap";
        } else {
            ## in MB
            ## $CSWAP = sprintf( "%.1fGB SWAP", $CSWAP / 1024 );
            $CSWAP = kilo( $CSWAP * 1024 * 1024 ) . ' SWAP';
        }
    }
    printv(qw(CCOREMODEL CNBCORE));

}

# SunOS
elsif ( $OSN =~ /^SunOS/ ) {
    ## poorly tested
    printd "-> ^SunOS\n";
    $ID = $OSN;
    if ( $CKNAME =~ /^5./ ) {
        $ID = 'Solaris';
    } else {
        $ID = 'SunOS';
    }
    $VERSION_ID = $CKNAME;
    $VERSION_ID =~ s/-.*//g;
    $CRELEASE = "$ID $VERSION_ID";

    $CKNAME = qxc('uname -v');

    ($CCOREMODEL) = qx'kstat -m cpu_info' =~ /^\s+brand\s+(.*)/m;
    $CNBCORE = grep( /\score_id\s/, qx'kstat cpu_info' );
    printv(qw(CCOREMODEL CNBCORE));

    ## Memory
    ($CMEM) = ( qx'prtconf' =~ /^Memory size: ([0-9]+) Megabytes/m );
    printv(qw(CMEM));
    ## in MB
    ## $CMEM = sprintf( "%.1fGB RAM", $CMEM / 1024 );
    $CMEM = kilo( $CMEM * 1024 * 1024 ) . ' RAM';

    # total: 163480k bytes allocated + 16100k reserved = 179580k used, 1013712k available
    ($CSWAP) = ( qx'swap -s' =~ /^total:.*, ([0-9]+)k available/mi );
    printv(qw(CSWAP));
    if ( $CSWAP eq 0 ) {
        $CSWAP = "no swap";
    } else {
        ## in KB
        ## $CSWAP = sprintf( "%.1fGB SWAP", $CSWAP / 1024 / 1024 );
        $CSWAP = kilo( $CSWAP * 1024 ) . ' SWAP';
    }

} else {
    $ID         = $OSN;
    $VERSION_ID = $CKNAME;
    $VERSION_ID =~ s/-.*//g;
    $CRELEASE   = "$ID $VERSION_ID";
    $CNBCORE    = 'n/a';
    $CCOREMODEL = 'n/a';
    $CMEM       = 'n/a';
    $CSWAP      = 'n/a';
    $CTAG       = 'n/a';
}

# Result
$CCOREMODEL =~ s/\(TM\)|\(R\)//gi;
$CCOREMODEL =~ s/ +$//g;

if ( -r $lsb_czo_file ) {
    if ( open( FILE, "<$lsb_czo_file" ) ) {
        ($DTAG) = <FILE>;
        chomp $DTAG;
        $DTAG =~ s/-//g;
        ## centos_6.5-x86_64-czo-20140410
        $CTAG = $ID . "_" . $VERSION_ID . "-" . $CCNAME . "-czo-" . $DTAG;
        close FILE;
    }
} else {
    $CTAG = $ID . "_" . $VERSION_ID . "-" . $CCNAME . "-czo-???";
}
$CTAG =~ s/(.*)/\L$1/;

# printv(qw (HOSTNAME PRETTY_NAME ID VERSION_ID CRELEASE CCNAME CKNAME CNBCORE CCOREMODEL CMEM CSWAP CTAG));
($WELCOME) = map { ( " " x ( ( 72 - length $_ ) / 2 ) ) . $_ } "Welcome on $HOSTNAME";

print <<HEREDOC
              ,,,
             (o o)
####=====oOO==(_)==OOo==============================================####

$WELCOME

 $CRELEASE, $CCNAME, $CKNAME
 $CNBCORE x $CCOREMODEL, $CMEM, $CSWAP
 Last update: $CTAG

####================================================================####

HEREDOC

__END__
